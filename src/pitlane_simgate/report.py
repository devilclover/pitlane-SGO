from __future__ import annotations
import json
from dataclasses import asdict
from typing import List, Dict, Any
from jinja2 import Template
from .models import RunResult, GateDecision
from .utils import json_dump, BLACK, PIT_RED, WHITE

def to_json(results: List[RunResult], decision: GateDecision) -> Dict[str, Any]:
    return {
        "results": [dict(run_id=r.run_id, scenario_id=r.scenario_id, params=r.params, metrics=asdict(r.metrics)) for r in results],
        "decision": asdict(decision),
    }

HTML_TMPL = Template(r"""
<!doctype html>
<html lang="en">
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Pitlane Sim-Gate Report</title>
<style>
:root { --black: {{black}}; --red: {{red}}; --white: {{white}}; }
html,body{background:var(--black);color:var(--white);font:16px/1.5 system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial,sans-serif;margin:0}
.wrap{max-width:1100px;margin:40px auto;padding:0 24px}
h1{font-size:32px;margin:0 0 10px 0;font-style:italic}
h2{font-size:22px;margin:24px 0 8px 0}
.card{border:1px solid rgba(255,255,255,.15);border-radius:14px;padding:16px;margin:12px 0;background:linear-gradient(180deg, rgba(255,255,255,.06), rgba(17,17,17,.25));backdrop-filter:blur(2px)}
.grid{display:grid;grid-template-columns:1fr 1fr;gap:10px}
.table{width:100%;border-collapse:collapse}
.table th,.table td{border-bottom:1px solid rgba(255,255,255,.1);padding:8px 6px;text-align:left}
.badge{display:inline-block;padding:2px 8px;border-radius:999px;border:1px solid rgba(255,255,255,.25)}
.pass{color:#9BE28C}.fail{color:#FF7A7A}
.hairline{height:1px;background:linear-gradient(90deg,transparent,rgba(255,255,255,.18),transparent);margin:18px 0}
.footer{opacity:.7;font-size:12px;margin-top:24px}
a{color:var(--red);text-decoration:none;border-bottom:1px solid rgba(225,6,0,.4)}
a:hover{border-bottom-color:rgba(225,6,0,.8)}
</style>
<div class="wrap">
  <h1>Pitlane Sim-Gate Report</h1>
  <div class="card">
    <strong>Decision:</strong>
    <span class="badge">{{ 'PASS' if decision.overall_pass else 'FAIL' }}</span>
    &nbsp;•&nbsp; Action: <strong>{{ decision.action }}</strong>
    &nbsp;•&nbsp; Risk: {{ decision.risk }}
    &nbsp;•&nbsp; Canary: {{ decision.canary_percent }}%
  </div>

  <div class="card">
    <h2>Gate Summary</h2>
    <div>
      {% for g in decision.gate_results %}
        <div>• {{ g.name }} — <span class="{{ 'pass' if g.passed else 'fail' }}">{{ 'pass' if g.passed else 'fail' }}</span>
        <span style="opacity:.75">({{ g.reason }})</span></div>
      {% endfor %}
    </div>
  </div>

  <div class="card">
    <h2>Runs</h2>
    <table class="table">
      <thead>
        <tr><th>Run</th><th>Params</th><th>time_to_goal_s</th><th>collisions</th><th>energy_kj</th><th>map_diff_iou</th></tr>
      </thead>
      <tbody>
        {% for r in results %}
          <tr>
            <td>{{ r.run_id }}</td>
            <td>{{ r.params }}</td>
            <td>{{ r.metrics.time_to_goal_s }}</td>
            <td>{{ r.metrics.collisions }}</td>
            <td>{{ r.metrics.energy_kj }}</td>
            <td>{{ r.metrics.map_diff_iou }}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </div>

  <div class="hairline"></div>
  <div class="footer">© PitlaneOps — Proof over promises. Generated by pitlane-simgate.</div>
</div>
</html>
""")

def write_report(results: List[RunResult], decision: GateDecision, out_json: str, out_html: str) -> None:
    data = to_json(results, decision)
    json_dump(data, out_json)
    html = HTML_TMPL.render(results=[asdict(r) for r in results], decision=asdict(decision), black=BLACK, red=PIT_RED, white=WHITE)
    with open(out_html, "w", encoding="utf-8") as f:
        f.write(html)
